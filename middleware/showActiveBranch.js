//---------------------------------------------------------------
// middleware/showActiveBranch.js
//---------------------------------------------------------------
// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
module.exports.moduleName = 'showActiveBranch';
module.exports.dependencies = ['sessionAndSave'];

module.exports.factory = (bot, pool) => {
    if (global.moduleRegistry && global.moduleRegistry.isModuleLoaded('showActiveBranch')) {
        return (ctx, next) => next();
    }

    return async (ctx, next) => {
        await next();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ç–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20%)
        if (ctx.message && !ctx.message.text.startsWith('/') && Math.random() < 0.2) {
            try {
                const branchId = ctx.session?.current_branch_id || 0;
                const [branch] = await pool.execute(
                    'SELECT name FROM branches WHERE id = ?',
                    [branchId]
                );
                
                const branchName = branch.length > 0 ? branch[0].name : '–û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞';
                await ctx.reply(
                    `üìÇ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞: ${branchName}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /structure –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`,
                    { reply_to_message_id: ctx.message.message_id }
                );
            } catch (error) {
                console.error('Error showing active branch:', error);
            }
        }
    };
};
//---------------------------------------------------------------

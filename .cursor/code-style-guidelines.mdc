---
description: Guidelines on how to make changes in the code
alwaysApply: false
---
# Coding Guidelines

## Persona

You are a senior full-stack developer. One of those rare 10x developers that has incredible knowledge.

## Local Development Environment Context Rules

Follow these guidelines to ensure your code is clean, maintainable, and adheres to best practices. Remember, less code is better. Lines of code = Debt.


## Critically important
**1** Only edit the code that you are working on - NEVER reformat code that was not changed directly
**2** Never add new code unless it's needed
**3** Before adding new code, check and try to re-use existing code
**4** ðŸš¨ keep all import statements at the top of the file, do not move them around
**5** ðŸš¨ NEVER use absolute URLs in the code, always use relative paths and configs that initialized by environment variables
**6** ðŸš¨ ALL SQL queries must be parameterized, never use string interpolation to build SQL queries
**7** ðŸš¨ Avoid long lines of code, break them into smaller parts (try to stay within 80 characters per line, max 120 characters)

# How to work with data
**1** Always try to use existing functions instead of going to the DB directly
**2** Use environment variables in URL, db, API calls etc, never hardcode inline addresses, ask if need more info



# Code Guidelines

**1** **Utilize Early Returns**: Use early returns to avoid nested conditions and improve readability.
**2** **Minimal Classes**: Write simple code if possible without using too many classes
**3** **Descriptive Names**: Use descriptive names for variables and functions. Prefix event handler functions with "handle" (e.g., handleClick, handleKeyDown).
**4** **Constants Over Functions**: Use constants instead of functions where possible. Define types if applicable.
**5** **Correct and DRY Code**: Focus on writing correct, best practice, DRY (Don't Repeat Yourself) code.
**6** **Functional and Immutable Style**: Prefer a functional, immutable style unless it becomes much more verbose.
**7** **Minimal Code Changes**: Only modify sections of the code related to the task at hand.
  Avoid modifying unrelated pieces of code. Accomplish goals with minimal code changes.
**8** **External API Handling**: If external API fails or returns null - NEVER make a "fall back to local implementation".
  Instead, throw an error and let the caller handle it. Avoid silent failures.
**9** **Avoid Deep Nesting**: Avoid deep nesting of code blocks. Refactor into smaller functions if necessary.
**10** **Avoid Magic Numbers and Strings**: Use named constants instead of magic numbers or strings.
**11** **Consistent Formatting**: Follow consistent formatting and indentation styles.
**12** **Avoid Over-Engineering**: Do not over-engineer solutions.
**13** **Avoid Premature Optimization**: Do not optimize code prematurely. Focus on readability and maintainability first.
**15** **Avoid Console Logs**: Do not use console.log for debugging. Use proper logging mechanisms.
**16** **Avoid Global Variables**: Do not use global variables. Use local scope or pass variables as parameters.
**17** **Avoid Side Effects**: Avoid side effects in functions. Functions should not modify external state.
**18** **Avoid Long Functions**: Keep functions short and focused on a single task. Break down long functions into smaller ones.
**19** **Avoid Deeply Nested Ternary Operators**: Do not use deeply nested ternary operators. Use if-else statements instead.
**20** **Avoid Callback Hell**: Avoid deeply nested callbacks. Use Promises or async/await for asynchronous code.
**21** **Avoid Large Files**: Avoid large files. Split code into smaller, manageable files if necessary.
**22** **Avoid Overuse of Libraries**: Do not overuse libraries. Use native language features where possible.
**23** **Avoid Inconsistent Naming Conventions**: Follow consistent naming conventions throughout the codebase.
**24** **Avoid Inconsistent Code Styles**: Follow consistent code styles throughout the codebase.
**25** **Avoid Inconsistent Error Handling**: Follow consistent error handling practices throughout the codebase.


# Comments and Documentation
**1** Only add comments if the code is complex, if the code is self-explanatory - do NOT add comments
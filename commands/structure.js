const registerCommand = require("../utils/registerCommand");
const { getTranslation } = require("../utils/translationUtils");
const { getUserLanguage } = require("../utils/languageUtils");


// –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–µ—Ç–∫–∏
async function getBranchName(branchId, languageCode) {
    const [rows] = await pool.execute(
      `SELECT COALESCE(
        (SELECT name FROM branch_translations 
         WHERE branch_id = ? AND language_code = ?),
        (SELECT name FROM branches WHERE id = ?)
      ) as name`,
      [branchId, languageCode, branchId]
    );
    return rows[0].name;
  }

  
/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –≤–µ—Ç–æ–∫
 */
async function buildTree(parentId = null, level = 0, pool, languageCode) {
  const [branches] = await pool.execute(
    "SELECT id, name FROM branches WHERE parent_id = ? ORDER BY sort_order ASC",
    [parentId]
  );

  let treeText = "";

  for (const branch of branches) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–µ—Ç–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ë–î
    const branchName =
      (await getTranslation(`branch.${branch.id}.name`, languageCode)) ||
      branch.name;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
    treeText += `${"  ".repeat(level)}‚Ä¢ ${branchName}\n`;

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–º–∫–æ–≤
    treeText += await buildTree(branch.id, level + 1, pool, languageCode);
  }

  return treeText;
}

module.exports = (bot, pool) => {
  const handleStructure = async (ctx) => {
    try {
      const userLanguage = await getUserLanguage(ctx.from.id, pool);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const title = await getTranslation("structure.title", userLanguage);

      // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
      const treeStructure = await buildTree(null, 0, pool, userLanguage);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `üå≥ *${title}:*\n\n${
        treeStructure || (await getTranslation("structure.empty", userLanguage))
      }`;

      ctx.replyWithMarkdown(message);
    } catch (error) {
      console.error("Structure command error:", error);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –æ—à–∏–±–∫–∏ –∏–ª–∏ fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      const errorMessage =
        (await getTranslation(
          "error.general",
          await getUserLanguage(ctx.from.id, pool)
        )) || "An error occurred";
      ctx.reply(errorMessage);
    }
  };

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
  registerCommand(bot, ["structure", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–¥–µ—Ä–µ–≤–æ"], handleStructure);
};

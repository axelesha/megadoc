const registerCommand = require('../utils/registerCommand');
const { validateBranchId, parseCommandParams, checkBranchPermission } = require('../utils/commandUtils');

module.exports = registerCommand('branch', async (ctx, pool) => {
  const params = parseCommandParams(ctx.message.text);
  const subcommand = params._[0];
  
  try {
    switch (subcommand) {
      case 'create':
        await handleCreateBranch(ctx, params, pool);
        break;
      case 'switch':
        await handleSwitchBranch(ctx, params, pool);
        break;
      case 'close':
        await handleCloseBranch(ctx, params, pool);
        break;
      case 'archive':
        await handleArchiveBranch(ctx, params, pool);
        break;
      case 'delete':
        await handleDeleteBranch(ctx, params, pool);
        break;
      case 'info':
        await handleBranchInfo(ctx, params, pool);
        break;
      case 'edit':
        await handleEditBranch(ctx, params, pool);
        break;
      case 'permission':
        await handlePermissionBranch(ctx, params, pool);
        break;
      default:
        await showBranchHelp(ctx);
    }
  } catch (error) {
    console.error('Branch command error:', error);
    await ctx.reply(`‚ùå ${error.message}`);
  }
}, {
  description: 'Manage branches',
  usage: '/branch <create|switch|close|archive|delete|info|edit|permission> [parameters]',
  aliases: ['br'],
  category: 'Branches'
});

async function handleEditBranch(ctx, params, pool) {
    const branchId = validateBranchId(params.id);
    const newId = params.newid ? validateBranchId(params.newid) : null;
    const name = params.name;
    const description = params.description;
    const accessType = params.access;
  
    // –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ç–∫—É
    const [branches] = await pool.execute(
      'SELECT id, created_by FROM branches WHERE chat_id = ? AND branch_id = ?',
      [ctx.chat.id, branchId]
    );
  
    if (branches.length === 0) {
      throw new Error(`Branch ${branchId} not found`);
    }
  
    const branch = branches[0];
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ admin –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    const hasAccess = await checkBranchPermission(pool, branch.id, ctx.from.id, 'admin');
    if (!hasAccess) {
      throw new Error(`You don't have permission to edit this branch`);
    }
  
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields = [];
    const updateValues = [];
  
    if (newId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π ID –Ω–µ –∑–∞–Ω—è—Ç
      const [existing] = await pool.execute(
        'SELECT id FROM branches WHERE chat_id = ? AND branch_id = ?',
        [ctx.chat.id, newId]
      );
      if (existing.length > 0) {
        throw new Error(`Branch ID ${newId} is already taken`);
      }
      updateFields.push('branch_id = ?');
      updateValues.push(newId);
    }
  
    if (name) {
      updateFields.push('name = ?');
      updateValues.push(name);
    }
  
    if (description) {
      updateFields.push('description = ?');
      updateValues.push(description);
    }
  
    if (accessType && ['public', 'protected', 'private'].includes(accessType)) {
      updateFields.push('access_type = ?');
      updateValues.push(accessType);
    }
  
    if (updateFields.length === 0) {
      throw new Error('No fields to update');
    }
  
    updateValues.push(branch.id);
  
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await pool.execute(
      `UPDATE branches SET ${updateFields.join(', ')} WHERE id = ?`,
      updateValues
    );
  
    await ctx.reply(`‚úÖ Branch ${branchId} updated successfully`);
  }
  
  async function handlePermissionBranch(ctx, params, pool) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏
    // –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    await ctx.reply('‚ö†Ô∏è Permission management will be implemented in the next phase');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ access_type
  async function handleCreateBranch(ctx, params, pool) {
    const branchId = validateBranchId(params.id);
    const parentId = params.parent || ctx.session.current_branch;
    const name = params.name || `Branch ${branchId}`;
    const description = params.description || '';
    const accessType = params.access || 'public';
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
    const [existing] = await pool.execute(
      'SELECT id FROM branches WHERE chat_id = ? AND branch_id = ?',
      [ctx.chat.id, branchId]
    );
  
    if (existing.length > 0) {
      throw new Error(`Branch ${branchId} already exists`);
    }
  
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
    const [result] = await pool.execute(
      `INSERT INTO branches (chat_id, branch_id, parent_id, name, description, access_type, created_by) 
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [ctx.chat.id, branchId, parentId, name, description, accessType, ctx.from.id]
    );
  
    // –î–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø—Ä–∞–≤–∞ owner
    await pool.execute(
      `INSERT INTO branch_permissions (branch_id, user_id, permission_level, granted_by) 
       VALUES (?, ?, 'owner', ?)`,
      [result.insertId, ctx.from.id, ctx.from.id]
    );
  
    await ctx.reply(`‚úÖ Branch ${branchId} created successfully with ${accessType} access`);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
  async function showBranchHelp(ctx) {
    const helpText = `
  üåø Branch Management:
  
  /branch create id=<id> [parent=<parent>] [name="Name"] [description="Description"] [access=public|protected|private]
  - Create a new branch
  
  /branch switch id=<id>
  - Switch to another branch
  
  /branch close id=<id>
  - Close a branch (read-only)
  
  /branch archive id=<id>
  - Archive a branch (hidden)
  
  /branch delete id=<id>
  - Mark branch as deleted
  
  /branch info id=<id>
  - Show branch information
  
  /branch edit id=<id> [newid=<new_id>] [name="New Name"] [description="New Description"] [access=public|protected|private]
  - Edit branch properties
  
  /branch permission [subcommand]
  - Manage user permissions (coming soon)
  
  Examples:
  /branch create id=LTM-1 name="Long Term Memory" access=protected
  /branch switch id=LTM-1
  /branch edit id=LTM-1 newid=LTM-2 name="Updated Name" access=private
    `.trim();
    
    await ctx.reply(helpText);
  }
